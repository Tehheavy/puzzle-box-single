{"version":3,"sources":["logo.svg","components/Register.js","components/GameItem.js","components/GameImage.js","components/Game.js","App.js","serviceWorker.js","SocketStore.js","index.js"],"names":["module","exports","Register","props","useState","search","setSearch","className","onClick","e","handleRegisterPress","placeholder","onChange","target","value","console","log","onKeyPress","charCode","preventDefault","alert","isNaN","handleKeyPress","GameItem","height","setheight","width","setwidth","canvasRef","useRef","useEffect","position","index","oldPosY","Math","floor","size","oldPosX","ctx","current","getContext","img","Image","onload","handleChangeSize","img_width","img_height","drawImage","src","imageUrl","ref","GameImage","Game","setPosition","array","setArray","setHeight","setWidth","Title","styled","div","newHeight","newWidth","event","key","newPos","oldArray","tempValue","prev","checkWin","handleClick","i","path","length","indexLocation","j","id","newPosY","newPosX","test","newArr","push","isSolvable","temp","random","RandomArray","initArray","document","getElementById","addEventListener","removeEventListener","style","display","flexDirection","flexWrap","justifyContent","inject","observer","SocketStore","setSize","setRandom","image","setImage","valid","setValid","countInversions","pos","inversions","lastTile","tileValue","q","tempPos","sumInversions","sumInversions2","count","isSolvable2","images","randomIndex","tempArray","sort","Boolean","window","location","hostname","match","socketStore","types","model","socket","frozen","username","string","views","self","getUsername","actions","register","name","setName","afterCreate","setSocket","create","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b0aa8e8b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState,useEffect, Component } from \"react\";\r\nimport './Register.css'\r\nfunction Register(props) {\r\n    const [search, setSearch] = useState(\"\");// Search bar value\r\n    const handleKeyPress=(e)=>{\r\n        if(e.charCode==13){\r\n            e.preventDefault();\r\n            if(search===\"\"){\r\n              alert(\"Enter a number\")\r\n            }\r\n            else{\r\n              if(!isNaN(search))\r\n                props.handleRegisterPress(search)\r\n            }\r\n            \r\n        } \r\n      }\r\n      const handleInput = event => {//saves Search bar value for later use\r\n        setSearch(event.target.value);\r\n        console.log(search)\r\n      };\r\n\r\n  return (\r\n    <div>\r\n      <div>Enter Board size</div>\r\n      <div className=\"Register-class\">\r\n\r\n       <button className=\"selectButton\" onClick={e=>{props.handleRegisterPress(3)}}>3</button>\r\n       <button className=\"selectButton\" onClick={e=>{props.handleRegisterPress(4)}}>4</button>\r\n       <button className=\"selectButton\" onClick={e=>{props.handleRegisterPress(5)}}>5</button>\r\n       <input placeholder=\"size\" onChange={e => handleInput(e)} onKeyPress={e=>{handleKeyPress(e)}}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Register;\r\n","import React, { useState, useEffect, Component,useRef, useLayoutEffect } from \"react\";\r\n\r\nfunction GameItem(props) {\r\n    const [height, setheight] = useState(0);\r\n    const [width, setwidth] = useState(0);\r\n    const canvasRef = useRef(null);\r\n\r\n\r\n    useEffect(() => {\r\n        let position=props.index\r\n        let oldPosY=Math.floor((position)/props.size);\r\n            let oldPosX=position%props.size;\r\n        // console.log('generated cube (x,y):','(',oldPosX,',',oldPosY,')')\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        var img = new Image();\r\n        img.onload = function () {\r\n            props.handleChangeSize(img.height,img.width+20)\r\n            let img_width = img.width/props.size;\r\n            let img_height = img.height/props.size;\r\n            setheight(img_height);\r\n            setwidth(img_width);\r\n            ctx.drawImage(img, img_width*oldPosX, img_height*oldPosY, img_width, img_height, 0, 0, img_width, img_height);\r\n            \r\n        }\r\n        img.src = props.imageUrl\r\n\r\n      }, [height,width]);\r\n    return (\r\n        <div>\r\n            {/* {props.children} */}\r\n            <canvas ref={canvasRef} height={height+'px'} width={width+'px'}></canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameItem;","import React, { useState, useEffect, Component,useRef, useLayoutEffect } from \"react\";\r\n\r\nfunction GameImage(props) {\r\n    const [height, setheight] = useState(0);\r\n    const [width, setwidth] = useState(0);\r\n    const canvasRef = useRef(null);\r\n\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        var img = new Image();\r\n        img.onload = function () {\r\n            let img_width = img.width;\r\n            let img_height = img.height;\r\n            setheight(img_height/props.size);\r\n            setwidth(img_width/props.size);\r\n            ctx.drawImage(img, 0, 0, img_width/props.size, img_height/props.size);\r\n            \r\n        }\r\n        img.src = props.imageUrl\r\n\r\n      }, [height,width]);\r\n    return (\r\n        <div>\r\n            {/* {props.children} */}\r\n            <canvas ref={canvasRef} height={height+'px'} width={width+'px'}></canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameImage;","import React, { useState, useEffect, Component } from \"react\";\r\nimport styled from 'styled-components'\r\nimport GameItem from './GameItem'\r\nimport GameImage from './GameImage'\r\nfunction Game(props) {\r\n    const [position, setPosition] = useState(props.size * props.size - 1);// Search bar value\r\n    const [array, setArray] = useState([]);\r\n    const [height, setHeight] = useState('600px');\r\n    const [width, setWidth] = useState('600px');\r\n    const Title = styled.div`\r\n        width: ${100 / props.size}%;\r\n        box-sizing: border-box;\r\n        `;\r\n\r\n    const handleChangeSize = (newHeight, newWidth) => {\r\n        // console.log('changed size')\r\n        setHeight(newHeight)\r\n        setWidth(newWidth)\r\n    }\r\n    const handleKeyPress = (event) => {\r\n        // console.log('USER CLICKED:', event.key)\r\n        // console.log('array:', array)\r\n        if (event.key === 'ArrowDown') {\r\n            // console.log('key ArrowDown')\r\n            // console.log('current pos:', position)\r\n            let oldPosY = Math.floor((position) / props.size);\r\n            let oldPosX = position % props.size;\r\n            // console.log('X,Y:', oldPosX, ',', oldPosY)\r\n            let newPos = ((oldPosY + 1) * props.size) + (oldPosX)\r\n            // console.log('swap with:', newPos, '(', (oldPosX), ',', (oldPosY + 1), ')')\r\n            if ((oldPosY + 1) < props.size) {\r\n                let oldArray = array;\r\n                // console.log('Def array:')\r\n                let tempValue = oldArray[newPos]\r\n                // console.log('temparray:', tempValue)\r\n                oldArray[newPos] = oldArray[position];\r\n                oldArray[position] = tempValue;\r\n                // console.log('SWAP SUCCESS new y=', oldPosY + 1)\r\n                setPosition(prev => (((oldPosY + 1) * props.size) + (oldPosX)));\r\n                setArray(prev => oldArray);\r\n                checkWin(oldArray);\r\n            }\r\n\r\n        }\r\n        if (event.key === 'ArrowUp') {\r\n            // console.log('current pos:', position)\r\n            let oldPosY = Math.floor((position) / props.size);\r\n            let oldPosX = position % props.size;\r\n            // console.log('X,Y:', oldPosX, ',', oldPosY)\r\n            let newPos = ((oldPosY - 1) * props.size) + (oldPosX)\r\n            // console.log('swap with:', newPos, '(', (oldPosX), ',', (oldPosY - 1), ')')\r\n            if (newPos >= 0) {\r\n                let oldArray = array;\r\n                // console.log('Def array:')\r\n                let tempValue = oldArray[newPos]\r\n                // console.log('temparray:', tempValue)\r\n                oldArray[newPos] = oldArray[position];\r\n                oldArray[position] = tempValue;\r\n                // console.log('SWAP SUCCESS')\r\n                setPosition(prev => (((oldPosY - 1) * props.size) + (oldPosX)));\r\n                setArray(prev => oldArray);\r\n                checkWin(oldArray);\r\n            }\r\n\r\n        }\r\n        if (event.key === 'ArrowLeft') {\r\n            // console.log('key ArrowLeft', position)\r\n            // console.log('array:', array)\r\n            // console.log('current pos:', position)\r\n            let oldPosY = Math.floor((position) / props.size);\r\n            let oldPosX = position % props.size;\r\n            // console.log('X,Y:', oldPosX, ',', oldPosY)\r\n            let newPos = ((oldPosY) * props.size) + (oldPosX - 1)\r\n            // console.log('swap with:', newPos, '(', (oldPosX - 1), ',', (oldPosY), ')')\r\n            if ((oldPosX - 1) >= 0) {\r\n                let oldArray = array;\r\n                // console.log('Def array:')\r\n                let tempValue = oldArray[newPos]\r\n                // console.log('temparray:', tempValue)\r\n                oldArray[newPos] = oldArray[position];\r\n                oldArray[position] = tempValue;\r\n                // console.log('SWAP SUCCESS')\r\n                setPosition(prev => (((oldPosY) * props.size) + (oldPosX - 1)));\r\n                setArray(prev => { return oldArray });\r\n                checkWin(oldArray);\r\n            }\r\n\r\n        }\r\n        if (event.key === 'ArrowRight') {\r\n            // console.log('key ArrowRight')\r\n            // console.log('array:', array)\r\n            // console.log('current pos:', position)\r\n            let oldPosY = Math.floor((position) / props.size);\r\n            let oldPosX = position % props.size;\r\n            // console.log('X,Y:', oldPosX, ',', oldPosY)\r\n            let newPos = ((oldPosY) * props.size) + (oldPosX + 1)\r\n            // console.log('swap with:', newPos, '(', (oldPosX + 1), ',', (oldPosY), ')')\r\n            if ((oldPosX + 1) < props.size) {\r\n                let oldArray = array;\r\n                // console.log('Def array:')\r\n                let tempValue = oldArray[newPos]\r\n                // console.log('temparray:', tempValue)\r\n                oldArray[newPos] = oldArray[position];\r\n                oldArray[position] = tempValue;\r\n                // console.log('SWAP SUCCESS')\r\n                setPosition(prev => (((oldPosY) * props.size) + (oldPosX + 1)));\r\n                setArray(prev => oldArray);\r\n                checkWin(oldArray);\r\n            }\r\n        }\r\n    }\r\n    const clicktest=(event)=>{\r\n    }\r\n    const findPos=(value)=>{\r\n        // console.log('findpos:',value)\r\n        // for(let i=0;i<props.size*props.size;i++){\r\n        //     console.log('asd')\r\n        //     console.log(array[i])\r\n            \r\n        // }\r\n    }\r\n    const handleClick = (event,i) =>{\r\n        if(event.path.length===12){\r\n            // console.log('clicked',event,event.path.length)\r\n            // console.log('id is:',event.path[2].id)\r\n        }\r\n        // console.log('array is',array)\r\n        let indexLocation=0;\r\n        for(let j=0;j<array.length;j++){\r\n            if(event.path[2].id==array[j].key)\r\n            {\r\n                // console.log('found index',j)\r\n                indexLocation=j     \r\n            }\r\n        }\r\n        // console.log(array[indexLocation].key)\r\n        let newPosY = Math.floor((indexLocation) / props.size);\r\n        let newPosX = indexLocation % props.size;\r\n        // console.log('X,Y:', newPosX, ',', newPosY)\r\n        let oldPosY = Math.floor((position) / props.size);\r\n        let oldPosX = position % props.size;\r\n        // console.log('X,Y:', oldPosX, ',', oldPosY)\r\n        if(newPosY==(oldPosY-1)&&oldPosX==newPosX){ //clicked above\r\n            let oldArray = array;\r\n            let tempValue = oldArray[indexLocation]\r\n            oldArray[indexLocation] = oldArray[position];\r\n            oldArray[position] = tempValue;\r\n            // console.log('SWAP SUCCESS')\r\n            setPosition(prev => (indexLocation));\r\n            setArray(prev => oldArray);\r\n            checkWin(oldArray);\r\n            // findPos(event)\r\n        }\r\n        if(newPosY==(oldPosY+1)&&oldPosX==newPosX){ //clicked below\r\n            let oldArray = array;\r\n            let tempValue = oldArray[indexLocation]\r\n            oldArray[indexLocation] = oldArray[position];\r\n            oldArray[position] = tempValue;\r\n            // console.log('SWAP SUCCESS')\r\n            setPosition(prev => (indexLocation));\r\n            setArray(prev => oldArray);\r\n            checkWin(oldArray);\r\n            // findPos(event)\r\n        } \r\n        if(newPosY==(oldPosY)&&oldPosX==(newPosX+1)){ //clicked below\r\n            let oldArray = array;\r\n            let tempValue = oldArray[indexLocation]\r\n            oldArray[indexLocation] = oldArray[position];\r\n            oldArray[position] = tempValue;\r\n            // console.log('SWAP SUCCESS')\r\n            setPosition(prev => (indexLocation));\r\n            setArray(prev => oldArray);\r\n            checkWin(oldArray);\r\n            // findPos(event)\r\n        } \r\n        if(newPosY==(oldPosY)&&oldPosX==(newPosX-1)){ //clicked below\r\n            let oldArray = array;\r\n            let tempValue = oldArray[indexLocation]\r\n            oldArray[indexLocation] = oldArray[position];\r\n            oldArray[position] = tempValue;\r\n            // console.log('SWAP SUCCESS')\r\n            setPosition(prev => (indexLocation));\r\n            setArray(prev => oldArray);\r\n            checkWin(oldArray);\r\n            // findPos(event)\r\n        } \r\n        // console.log('handleClick array:',array,indexLocation)\r\n      }\r\n     \r\n    const initArray = (size) => {\r\n        // console.log('initArray size:', size)\r\n        let temp = []\r\n        for (let i = 0; i < size * size; i++) {\r\n            // setArray([...array,<div>test</div>], ()=>{console.log('quadraped',array)})\r\n            if (i !== size * size - 1) {\r\n                // let randomColorValueR = Math.floor(Math.random() * 255);\r\n                // let randomColorValueG = Math.floor(Math.random() * 255);\r\n                // let randomColorValueB = Math.floor(Math.random() * 255);\r\n                let randomColorValueR = Math.floor(Math.random() * 255);\r\n                let randomColorValueG = Math.floor(Math.random() * 255);\r\n                let randomColorValueB = Math.floor(Math.random() * 255);\r\n                temp.push(<Title key={i} id={i}>\r\n                    {/* <div style={{backgroundColor:'rgb('+randomColorValueR+','+randomColorValueG+','+randomColorValueB+')'}}> */}\r\n                    <GameItem handleChangeSize={handleChangeSize} imageUrl={props.imageUrl} size={size} index={i}>{i}</GameItem>\r\n                    {/* </div> */}\r\n                </Title>)\r\n            }\r\n            else\r\n                temp.push(<Title key={size*size-1}  id={i}><div></div></Title>)\r\n        }\r\n\r\n        //SHUFFLE ARRAY ALGORITHM HERE TODO:\r\n        let RandomArray=[]\r\n        for(let i=0;i<size*size-1;i++){\r\n            RandomArray.push(temp[props.random[i]]);\r\n        }\r\n        console.log(props.random[0]+1,props.random[1]+1,props.random[2]+1,props.random[3]+1,props.random[4]+1,props.random[5]+1,props.random[6]+1,props.random[7]+1)\r\n        RandomArray.push(temp[size*size-1]);\r\n        // console.log('random arr is:',RandomArray)\r\n        setArray(RandomArray);\r\n        // console.log('setting array to:', temp)\r\n    }\r\n    const checkWin = (value) => {\r\n        // console.log('check win:',value)\r\n        // console.log(value[0])\r\n        let test=0;\r\n        let newArr=[]\r\n        for(let i=0;i<value.length;i++){\r\n            newArr.push(value[i].key)\r\n        }\r\n        console.log('iS solvable now?:',props.isSolvable(props.size,newArr))\r\n        for(let i=0;i<props.size*props.size-1;i++){\r\n            if(value[i].key==i){\r\n                test++;\r\n            }\r\n            // console.log('TEST IS ',test)\r\n        }\r\n        if(test==(props.size*props.size-1)){\r\n            alert(\"WIN!!\")\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        // console.log('refresh')\r\n        if (array.length === 0){\r\n            \r\n            initArray(props.size);\r\n        }\r\n        for(let i=0;i<props.size*props.size;i++){\r\n            // console.log(document.getElementById(i),'testtest')\r\n            if(document.getElementById(i)){\r\n                // console.log('exist')\r\n                document.getElementById(i).addEventListener('click',handleClick)\r\n            }\r\n        }\r\n        document.addEventListener(\"keydown\", handleKeyPress, false);\r\n        // console.log('created keydown event')\r\n        return () => {\r\n            document.removeEventListener(\"keydown\", handleKeyPress, false);\r\n            console.log('removed keydown event')\r\n            for(let i=0;i<props.size*props.size;i++){\r\n                // console.log(document.getElementById(i),'testtest')\r\n                // console.log('deleting')\r\n                if(document.getElementById(i)){\r\n                    // console.log('exist')\r\n                    document.getElementById(i).removeEventListener('click',handleClick)\r\n                }\r\n            }\r\n        };\r\n    }, [array, position]);\r\n    return (\r\n        <div className=\"flex-game\">\r\n\r\n            <div style={{width:'1rem'}}>\r\n                Image:\r\n                <GameImage size={3} imageUrl={props.imageUrl}></GameImage>\r\n            </div>\r\n\r\n            <div style={{ display: 'flex', flexDirection: 'row', height: height, width: width }} onKeyPress={e => { handleKeyPress() }}>\r\n\r\n                <div style={{ display: 'flex', flexWrap: 'wrap', justifyContent: \"center\" }}>\r\n                    {array}\r\n                </div>\r\n\r\n            </div>\r\n            <div style={{height:'1rem'}}>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Game;","import React, { useState, useEffect, Component } from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport Register from './components/Register'\nimport Game from './components/Game'\nimport { observer, inject } from 'mobx-react'; //These functions make our components observable and be able to use the store\nfunction App({ SocketStore }) {\n  const [size, setSize] = useState(\"\");\n  const [random, setRandom] = useState([]);\n  const [image,setImage] = useState('');\n  const [valid,setValid]= useState(false)\n  // const [image]\n  // console.log('lobby is:',lobby)\n  // var list = [{ 'name': 'Bobs Game', 'number': '5', 'id': '878' }]\n\n\n\n  function countInversions (size,pos,array){ //\n    // console.log('teststoiajoiajsdoijo')\n    let oldPosY = Math.floor((pos) / size);\n    let oldPosX = pos % size;\n    let inversions = 0;\n    let tileNum = pos;\n    let lastTile = size * size;\n    let tileValue = oldPosY * size + oldPosX;\n    for (let q = tileNum + 1; q < lastTile; ++q) {\n      let k = q % size;//y\n      let l = Math.floor(q / size);//x\n      let newPosY = k\n      let newPosX = l\n      let tempPos = ((newPosY) * size) + (newPosX)\n      // console.log('testing',tempPos)\n      let compValue = (Math.floor(array[tempPos] / size)) * size + ((array[tempPos]%size));\n\n      if (tileValue > compValue && tileValue != (lastTile - 1)) {\n        ++inversions;\n      }\n    }\n    return inversions;\n  }\n  const sumInversions=(size,random)=> {\n    let inversions = 0;\n    console.log('size size',size)\n    for (let j = 0; j < size; ++j) {\n      for (let i = 0; i < size; ++i) {\n        let newPos = ((j) * size) + (i)\n        inversions += countInversions(size,newPos, random);\n      }\n    }\n    return inversions;\n  }\n  const sumInversions2=(random)=>{\n    console.log('random is ',random)\n    let count=0;\n    for(let i=0;i<random.length-1;i++){\n      for(let j=i+1;j<random.length;j++){\n        if(random[i]>random[j])\n        count++;\n      }\n    }\n    return count;\n  }\n  function isSolvable2(size,random) {\n    return (sumInversions2(random) % 2 == 0)\n  }\n  function isSolvable(size,random) {\n    return (sumInversions(size,random) % 2 == 0)\n  }\n  \n  const handleRegisterPress = (value) => {\n\n    var tempArray=[];\n    do{\n      tempArray=[];\n      for(let i=0;i<value*value-1;i++){\n        tempArray.push(i);\n      }\n      tempArray.sort(() => Math.random() - 0.5);\n      console.log(tempArray)\n      console.log('is solvable:',isSolvable(value,tempArray))\n      console.log('is solvable2:',isSolvable2(value,tempArray))\n      \n    }\n    while(!isSolvable2(value,tempArray))\n    console.log('pre sums',tempArray)\n    console.log('sum inversions1:',sumInversions(value,tempArray))\n    console.log('sum inversions2:',sumInversions2(tempArray))\n    console.log('is solvable:',isSolvable(value,tempArray))\n    console.log('is solvable2:',isSolvable2(value,tempArray))\n    if(isSolvable(value,tempArray)){\n      setRandom(tempArray);\n      setSize(value);\n      setValid(true)\n\n    }\n    // sumInversions([6,3,2,5,4,7,1,0])\n\n  }\n \n  useEffect(() => {\n    let images =['https://i.imgur.com/YLWsY4G.jpg','https://i.imgur.com/Irg9QIx.jpg','https://i.imgur.com/W9U5y71.jpg']\n    let randomIndex=Math.floor(Math.random() * images.length)\n    setImage(images[randomIndex])\n    // console.log('pre ',success)\n    // var person=\"\";\n    // while(!person){\n    //  person = prompt(\"Please enter your name\", \"BOB\");\n    //     console.log(person)\n    // } \n    // console.log(\"asdasdsad\")\n    // setUsername(person)\n    // console.log(person)\n  }, []);\n  if (valid === false)\n    return (<div className=\"App\">\n      {/* <LobbyRegister visible={lobby}></LobbyRegister> */}\n      {/* <Register handleRegisterPress={handleRegisterPress} /> */}\n      <Register handleRegisterPress={handleRegisterPress}></Register>\n    </div>\n    );\n  else\n    return (\n      <div className=\"App\">\n        <div className=\"Lobby-class\">\n           <Game size={size} random={random} isSolvable={isSolvable}imageUrl={image}></Game>\n        </div>\n      </div>\n    );\n}\n\nexport default inject('SocketStore')(observer(App))\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { types } from 'mobx-state-tree'\r\n\r\nimport io from 'socket.io-client';\r\n// const socket = io('http://localhost:5000')\r\n\r\nconst Socket = types.model(\"SocketStore\", {\r\n    socket: types.frozen(),\r\n    username: types.string\r\n\r\n}).views(self => ({\r\n    getUsername() {\r\n        return self.username\r\n    }\r\n})).actions(self => {\r\n    function register(name) {\r\n        self.username = name;\r\n        // console.log(self.socket, 'in register');\r\n        // self.socket.emit('register','sexy eric')\r\n        // console.log('is connected?:',self.socket.connected)\r\n        // console.log(\"register emitted\", name)\r\n    }\r\n    function setName(name) {\r\n        self.username = name;\r\n    }\r\n    function setSocket(socket){\r\n        self.socket=socket;\r\n        \r\n    }\r\n    function afterCreate() {\r\n    }\r\n    return {\r\n        register,\r\n        setName,\r\n        afterCreate,\r\n        setSocket\r\n    }\r\n});\r\n\r\nconst socketStore = Socket.create({\r\n    socket:{},// users is not required really since arrays and maps are optional by default since MST3\r\n    username: \"\"\r\n})\r\n\r\nexport default socketStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'mobx-react';\nimport * as serviceWorker from './serviceWorker';\nimport SocketStore from './SocketStore'\n\n// const store = SocketStore.create({})\n\nconsole.log(SocketStore)\nReactDOM.render(\n  <Provider SocketStore={SocketStore}>\n    <App />\n  </Provider>, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}